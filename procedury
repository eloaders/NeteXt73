#!/bin/bash
## Graficzny instalator kerneli e X t 7 3  - NeteXt'73
## przygotowanie kerneli e X t 7 3 - ext73@wp.pl
## przygotowanie skryptów optymalizacyjnych e X t 7 3
## autor skryptu NeteXt'73 - NetBit73 - netbit73@gmail.com
## Licencja: GPL v3: https://www.gnu.org/licenses/gpl.txt
#
#		    _   _      _      __  ___   _ _____ _____
#		   | \ | | ___| |_ ___\ \/ / |_( )___  |___ /
#		   |  \| |/ _ \ __/ _ \\  /| __|/   / /  |_ \
#		   | |\  |  __/ |_  __//  \| |_    / /  ___) |
#		   |_| \_|\___|\__\___/_/\_\\__|  /_/  |____/
#
#	            __ _ _ __ __ _ / _(_) ___ _____ __  _   _
#	           / _` | '__/ _` | |_| |/ __|_  / '_ \| | | |
#	          | (_| | | | (_| |  _| | (__ / /| | | | |_| |
#	           \__, |_|  \__,_|_| |_|\___/___|_| |_|\__, |
#	           |___/                                |___/
#     _           _        _       _                   _                        _ _
#    (_)_ __  ___| |_ __ _| | __ _| |_ ___  _ __      | | _____ _ __ _ __   ___| (_)
#    | | '_ \/ __| __/ _` | |/ _` | __/ _ \| '__|     | |/ / _ \ '__| '_ \ / _ \ | |
#    | | | | \__ \ |_ (_| | | (_| | |_ (_) | |        |   <  __/ |  | | | |  __/ | |
#    |_|_| |_|___/\__\__,_|_|\__,_|\__\___/|_|        |_|\_\___|_|  |_| |_|\___|_|_|
#        __  __  _     _____   _____      ___     _   _      _   ____  _ _  _____ ____
#   ___  \ \/ / | |_  |___  | |___ /     ( _ )   | \ | | ___| |_| __ )(_) |____  |___ /
#  / _ \  \  /  | __|    / /    |_ \     / _ \/\ |  \| |/ _ \ __|  _ \| | __| / /  |_ \
# |  __/  /  \  | |_    / /    ___) |   | (_>  < | |\  |  __/ |_| |_) | | |_ / /  ___) |
#  \___| /_/\_\  \__|  /_/    |____/     \___/\/ |_| \_|\___|\__|____/|_|\__/_/  |____/
#
#########################################################################################################################################################################


LATEST_VERSION=$(grep 'v[0-9]' /opt/NeteXt73/changelog | head -n 1 | cut -d 'v' -f 2)

jezyczek(){

#katalog dla sysbench
if [ ! -e ~/.netext73/sysbench ]; then
	mkdir ~/.netext73/sysbench -p
fi

#katalog dla glmark2
if [ ! -e ~/.netext73/glmark2 ]; then
	mkdir ~/.netext73/glmark2 -p
fi

#katalog dla logów
if [ ! -e ~/.netext73/logi ]; then
	mkdir ~/.netext73/logi -p
fi

#teksty w języku polskim
if [ -e ~/.netext73/jezyk ] && [ "$(cat ~/.netext73/jezyk | grep -e "niemiecki" -e "francuski")" != "" ]; then
	export jezyk="angielski"
	echo 'angielski' >  ~/.netext73/jezyk
fi
if [ -e ~/.netext73/jezyk ]; then
	export jezyk=$(cat ~/.netext73/jezyk)
else
	if [ "$(echo $LANG | grep pl)" != "" ]; then
		export jezyk="polski"
		echo 'polski' >  ~/.netext73/jezyk
	else
		export jezyk="angielski"
		echo 'angielski' >  ~/.netext73/jezyk
	fi
fi

}

#pobranie tłumaczeń
source /opt/NeteXt73/tlumaczenia/angielski
jezyczek; case $jezyk in pol*)
	source /opt/NeteXt73/tlumaczenia/polski
;;
esac

export nazwa_skryptu="NeteXt'73 v$LATEST_VERSION - $TEXT_NETEXT2"
export nazwa_skryptu1="NeteXt'73 v$LATEST_VERSION"
#wersje APM
export wersja_apm1="advanced_power_management_by_ext73_conservative-conservative"
export wersja_apm2="advanced_power_management_by_ext73_ondemand-ondemand"
export wersja_apm3="advanced_power_management_by_ext73_intel-performance"
export wersja_apm4="advanced_power_management_by_ext73_intel-powersave"
export wersja_apm5="advanced_power_management_by_ext73_performance-conservative"
export wersja_apm6="advanced_power_management_by_ext73_performance-ondemand"
#nazwy ikon do dymków
export error1="dialog-error"
export ikona_info1="dialog-information"
export warning1="dialog-warning"

export adres_opisu="http://www.netext73.pl/search/label/opis_netext73"

export wersje_ubu="wily!trusty!unstable"

#wsparcie mint
export WERSJA_UBUNTU="$(lsb_release -cs)"
export NR_WERSJA_UBUNTU="$(lsb_release -rs)"
case `lsb_release -cs` in
		qiana|rebecca|rafaela|freya|rosa)
		export WERSJA_UBUNTU="trusty" 
		export NR_WERSJA_UBUNTU="14.04" ;;
esac

#adres serwera
export adres_glowny="ftp://37.59.165.105"
export adres_sterownikow="$adres_glowny/sterowniki/"
export adres_sterownikow_optimus="$adres_glowny/nvidia_optimus/"

#sumy sumy kontrolne
export katalog2="2"
export sumy_kontrolne='/tmp/netext73/sumy/sumy_kontrolne.txt'
export adres_sum_kontrolnych="https://raw.githubusercontent.com/NetBit73/sumy/master/sumy_kontrolne.txt"
export adres_sum_kontrolnych2="$adres_glowny/test_serwera.txt"

if [ "$(cat /proc/cpuinfo | grep Intel)" != "" ]; then
	export komputerek="INTEL"
elif [ "$(cat /proc/cpuinfo | grep AMD)" != "" ]; then
	export komputerek="AMD"
fi
#bity
if [ "$(uname -m)" = "x86_64" ]; then
	bit="64bit"
	bit2="amd64"
else 
	yad --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/netext.png" --button="gtk-ok:0" --title="$nazwa_skryptu"  --text="$TEXT_STEROWNIKI1"
	exit 1
fi

if [ "$(echo $WERSJA_UBUNTU | grep -i trusty)" = "" ]; then
	export apmik="nowy"
	export katalog_apm="/etc/apm-ext73/advanced_power_management_by_ext73_*"
else
	export apmik="stary"
	export katalog_apm="/etc/pm/power.d/advanced_power_management_by_ext73_*"

fi
export wersja_apm=$(ls /opt/NeteXt73/APM/advanced_power_management_by_ext73_* | cut -d '_' -f 6 | tail -n 1 | sed 's/.tar.gz//')

#premium
if [ -e ~/.netext73/kernel_premium ]; then
	if [ "$(grep @.*@ ~/.netext73/kernel_premium)" = "" ]; then
		rm -f ~/.netext73/kernel_premium
		kernel_premium="brak"
	else
		export US1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 1)
		export PASS1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 3)
		kernel_premium="tak"
	fi
fi

#kolor textu
if [ -e ~/.netext73/kolor_textu ]; then
	export kolor_textu=$(cat ~/.netext73/kolor_textu)
else
	export kolor_textu="blue"
fi

#adres katalogu download
if [ -e ~/Pobrane ]; then
	export download="/home/$USER/Pobrane"
else
	export download="/home/$USER/Downloads"
fi

if [ $USER = "root" ]; then
	export download="/root"
fi
if [ ! -e $download ]; then
      mkdir -p $download
fi

#HiDPI
if [ -e ~/.netext73/HiDPI ] && [ "$(cat ~/.netext73/HiDPI)" = "TRUE" ]; then
	export skala=2
else
	export skala=1
fi


#########################################################################################################################################################################
#procedury

#pasek postępu pobierania pulsujący gdy coś długo trwa
pobieranie(){
yad --center --width=$((560*$skala)) --title="  $nazwa_skryptu" --text="$TEXT_POBIERANIE" --progress --pulsate --auto-close --auto-kill --window-icon="/opt/NeteXt73/ikony/download.png" --button="$TEXT_POWROT:1"
}

#pobieranie plików do instalacji kerneli
pobieranie_kerneli(){
if [ "$kern" = "$TEXT_MENU_INSTALATOR5" ];then
	wget $strona/$a #2>&1  | pobieranie
	if [ "$(grep extra $a)" != "" ]; then
		yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-[0-9]"| grep -v -E "latency")  $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-extra" | grep "linux-image"| grep -v -E "latency")
	else
		yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image"| grep -v -E "latency")
	fi
else
	#pobieranie kerneli e X t 7 3
	#nazwy paczek dla v30.x
	nazwa_paczki="$(echo $a | cut -d "_" -f 2)$(echo -$rodzaj'_'$bit2.deb)"
	yad_wget $strona/$a/linux-headers-$nazwa_paczki $strona/$a/linux-image-$nazwa_paczki
fi
rm ./index.html -f
}

please_wait(){
if [ "$1" = "kill" ]; then
	ps aux | awk '$11" "$12 == "python /opt/NeteXt73/czekaj.py" { system("kill " $2) }'
else
	python /opt/NeteXt73/czekaj.py &
fi
}

wersja(){
dymek -i "preferences-other" "$nazwa_skryptu" "$TEXT_INFO1"
}

naglowek(){
echo '#!/bin/bash'
}

instaluj_kernel(){
echo "echo \"$TEXT_PROCEDURA_1\""
echo "sudo sed -i 's+^start on mounted MOUNTPOINT=/proc TYPE=proc+start on mounted MOUNTPOINT=/var+' /etc/init/mounted-proc.conf"
echo "sudo sed -i 's+^start on starting mountall+start on mounted MOUNTPOINT=/var+' /etc/init/ureadahead.conf"
echo "/usr/bin/yes | sudo dpkg -i linux-headers* linux-image*"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "if [ \"\$(lspci | grep -i bcm | grep -i wireless)\" != \"\" ]; then"
echo "sudo dpkg -i /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety/ | grep bcmwl-kernel-source)"
echo "fi"
echo "echo 'tak' > /tmp/netext73/ok.txt"
}

usun_lpt(){
#wyłączenie LPT dla premium
echo "if [ \"\$(ls /boot | grep vmlinuz | sort -r | head -n 1 | grep i7)\" != \"\" ] || [ \"\$(ls /boot | grep vmlinuz | sort -r | head -n 1 | grep brazos)\" != \"\" ];then"
echo "if [ \"\$(grep '#lp' /etc/modules)\" = \"\" ]; then"
echo "sudo sed -i 's/lp/#lp/g' /etc/modules"
echo "fi"
echo "if [ \"\$(grep '#lp' /etc/modules-load.d/cups-filters.conf)\" = \"\" ]; then"
echo "sudo sed -i 's/lp/#lp/g' /etc/modules-load.d/cups-filters.conf"
echo "fi"
echo "if [ \"\$(grep '#ppdev' /etc/modules-load.d/cups-filters.conf)\" = \"\" ]; then"
echo "sudo sed -i 's/ppdev/#ppdev/g' /etc/modules-load.d/cups-filters.conf"
echo "fi"
echo "if [ \"\$(grep '#parport_pc' /etc/modules-load.d/cups-filters.conf)\" = \"\" ]; then"
echo "sudo sed -i 's/parport_pc/#parport_pc/g' /etc/modules-load.d/cups-filters.conf"
echo "fi"
echo "elif [ \"\$(ls /boot | grep vmlinuz | sort -r | head -n 1 | grep generic)\" != \"\" ] ||[ \"\$(ls /boot | grep vmlinuz | sort -r | head -n 1 | grep k8)\" != \"\" ] || [ \"\$(ls /boot | grep vmlinuz | sort -r | head -n 1 | grep atom)\" != \"\" ];then"
echo "sudo sed -i 's/#lp/lp/g' /etc/modules"
echo "sudo sed -i 's/#lp/lp/g' /etc/modules-load.d/cups-filters.conf"
echo "sudo sed -i 's/#ppdev/ppdev/g' /etc/modules-load.d/cups-filters.conf"
echo "sudo sed -i 's/#parport_pc/parport_pc/g' /etc/modules-load.d/cups-filters.conf"
echo "fi"
}

stan_firmware(){
twoj_firmware=$(dpkg -l | grep linux-firmware | awk '{print $3}' | head -n 1 | sed 's/~.*//')
dostepny_firmware=$(ls /opt/NeteXt73/pakiety/ | grep linux-firmware | cut -d "_" -f 2)
if [ "$(cat /proc/cpuinfo | grep Intel)" != "" ]; then
	if [ "$(dpkg -l intel-microcode | grep "ii" | awk '{print $1}'| head -n1)" = "ii" ] ; then
		stan_microcode=$TEXT_TAK
	else
		stan_microcode="-"
	fi
elif [ "$(cat /proc/cpuinfo | grep AMD)" != "" ]; then
	if [ -e /lib/firmware/amd-ucode/microcode_amd.bin ]; then
		stan_microcode=$TEXT_TAK
	else
		stan_microcode="-"
	fi
fi
if [ "$twoj_firmware" = "$dostepny_firmware" ]; then
	stan_microcode=$TEXT_TAK
else
	stan_microcode="-"
fi
}

microcode_firmware(){
#nonfree
if [ "$(dpkg -l | grep linux-firmware-nonfree | grep ii )" = "" ]; then
      yad --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="gtk-ok:0" --button="$TEXT_POWROT:1" --text="$TEXT_PROCEDURA_4"
      if [ $? = 0 ]; then
	    echo "tak" > /tmp/netext73/ok.txt
      else
	    echo "nie" > /tmp/netext73/ok.txt
      fi
else
      echo "nie" > /tmp/netext73/ok.txt
fi
instalacja
}

microcode_inst(){
echo "echo \"$TEXT_PROCEDURA_2\""
echo "if [ \"\$(cat /tmp/netext73/ok.txt)\" = \"tak\" ]; then"
echo "sudo apt-get install linux-firmware-nonfree -y"
echo "fi"
echo "sudo dpkg -i /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety/ | grep linux-firmware)"
echo "if [ \"\$(cat /proc/cpuinfo | grep Intel)\" != \"\" ]; then"
echo "sudo apt-get install intel-microcode -y"
echo "sudo dpkg -i /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety/ | grep intel-microcode)"
echo "sudo dpkg -i /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety/ | grep iucode-tool)"
echo "else"
echo "sudo apt-get install amd64-microcode -y"
echo "fi"
}

microcode_usun(){
echo "echo \"$TEXT_PROCEDURA_3\""
echo "/usr/bin/yes | sudo dpkg -r linux-firmware-nonfree"
echo "if [ \"\$(cat /proc/cpuinfo | grep Intel)\" != \"\" ]; then sudo apt-get purge intel-microcode -y; fi"
echo "sudo rm /lib/firmware/* -rf"
}

apm_inst(){
sudo rm -fr /etc/pm/power.d/* /usr/lib/pm-utils/power.d/readahead
sudo chmod a-x /usr/lib/pm-utils/power.d/*
sudo chmod a-x /etc/apm/event.d/20hdparm
sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-resume.service
sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-before.service
sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-before.service
sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-before.service
sudo rm -f /etc/udev/rules.d/40-wol-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/50-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/70-brightness-udev-apm-ext73.rules
sudo rm -f /etc/udev/rules.d/80-xfs-udev-apm-ext73.rules
sudo mkdir -p /etc/apm-ext73
sudo rm -f /etc/apm-ext73/*
mkdir /tmp/apm-ext73 -p
rm /tmp/apm-ext73/* -f
tar -xvzf /opt/NeteXt73/APM/advanced_power_management_by_ext73_$wersja_apm.tar.gz -C /tmp/apm-ext73/
if [ "$apmik" = "stary" ]; then
	#przegrywanie plików APM`
	sudo cp /tmp/apm-ext73/advanced_power_management* /etc/pm/power.d/
	sudo cp /tmp/apm-ext73/brightness /etc/apm-ext73/
	sudo chmod a+x /usr/lib/pm-utils/power.d/xfs_buffer /usr/lib/pm-utils/power.d/disable_wol 
	sudo chmod a-x /etc/pm/power.d/*
	sudo chown root:root /etc/pm/power.d/*
	sudo chown root:root /etc/apm-ext73/*
	#przegrywanie udev dla jasności
	sudo cp /tmp/apm-ext73/60-brightness-udev-apm-ext73.rules /etc/udev/rules.d/
	sudo chown root:root /etc/udev/rules.d/*

	if [ -e ~/.netext73/apm_status ]; then
		if [ "$(ls /etc/pm/power.d/* | grep $(cat  ~/.netext73/apm_status | head -n 1))" != "" ]; then #zaznaczanie aktywnego APM wg configu
			sudo chmod a+x $(ls /etc/pm/power.d/* | grep $(cat  ~/.netext73/apm_status | head -n 1)) 
		else
			sudo chmod a+x /etc/pm/power.d/$wersja_apm1*$wersja_apm 
		fi
	else
		sudo chmod a+x /etc/pm/power.d/$wersja_apm1*$wersja_apm
	fi
elif [ "$apmik" = "nowy" ]; then
	sudo cp /tmp/apm-ext73/advanced_power_management* /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/brightness /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/apm_before /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/apm_resume /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/wol /etc/apm-ext73/
	sudo cp /tmp/apm-ext73/xfs_buffer /etc/apm-ext73/
	sudo chown root:root /etc/apm-ext73/*
	sudo cp /tmp/apm-ext73/*.rules /etc/udev/rules.d/
	sudo chown root:root /etc/udev/rules.d/*
	#APM systemd
	sudo cp /tmp/apm-ext73/apm_ext73*.service /etc/systemd/system/hibernate.target.wants/
	sudo cp /tmp/apm-ext73/apm_ext73*.service /etc/systemd/system/hybrid-sleep.target.wants/
	sudo cp /tmp/apm-ext73/apm_ext73*.service /etc/systemd/system/suspend.target.wants/
	sudo chown root:root /etc/systemd/system/hibernate.target.wants/*
	sudo chown root:root /etc/systemd/system/hybrid-sleep.target.wants/*
	sudo chown root:root /etc/systemd/system/suspend.target.wants/*
	#udev jeżeli notebook
	if [ "$(ls /sys/class/power_supply/*)" != "" ]; then
		sudo cp /tmp/apm-ext73/udev-ext73.tar.gz -C /etc/udev/rules.d/
		sudo chown root:root /etc/udev/rules.d/*
		katalog="/etc/udev/rules.d/50-udev-apm-ext73.rules"
	else
	#dodanie apm fixa do rc.local
		katalog="/etc/rc.local"
		sudo sed -i '/apm-ext73/d' /etc/rc.local
		sudo sed -i '/apm_status_fix/d' /etc/rc.local
		sudo sed -i '/exit 0/d' /etc/rc.local
		echo '/etc/apm-ext73/wol false'  | sudo tee -a /etc/rc.local
		echo '/etc/apm-ext73/advanced_power_management_by_ext73_performance-ondemand_v5.0 false' | sudo tee -a /etc/rc.local
		echo '/etc/apm-ext73/brightness false' | sudo tee -a /etc/rc.local
		echo '/etc/apm-ext73/xfs_buffer false' | sudo tee -a /etc/rc.local
		echo 'bash /opt/NeteXt73/APM/apm_status_fix' | sudo tee -a /etc/rc.local
		echo 'exit 0' | sudo tee -a /etc/rc.local
	fi
	if [ -e ~/.netext73/apm_status ] && [ "$(cat $katalog | grep $(cat  ~/.netext73/apm_status | head -n 1))" = "" ]; then 
		#zaznaczanie aktywnego APM wg configu
		a=$(cat  ~/.netext73/apm_status | head -n 1)
		sudo sed -i "s/conservative-conservative/$a/g" $katalog
		sudo sed -i "s/ondemand-ondemand/$a/g" $katalog
		sudo sed -i "s/intel-performance/$a/g" $katalog
		sudo sed -i "s/intel-powersave/$a/g" $katalog
		sudo sed -i "s/performance-conservative/$a/g" $katalog
		sudo sed -i "s/performance-ondemand/$a/g" $katalog
	fi

fi
sudo chown root:root /usr/lib/pm-utils/power.d/*
sudo /etc/init.d/ondemand stop
sudo update-rc.d -f ondemand remove

#ustawienie jasności wg aktualnej
katalog_jasnosc=$(ls /sys/class/backlight | head -n 1)
if [ "$katalog_jasnosc" != "" ]; then
	wartsc_bright=$(cat /sys/class/backlight/$katalog_jasnosc/brightness)
	sudo sed -i "/#ac/ s/echo.*>/echo $wartsc_bright >/" /etc/apm-ext73/brightness
	sudo sed -i "/#bateria/ s/echo.*>/echo $wartsc_bright >/" /etc/apm-ext73/brightness
	sudo sed -i "s/jasnosc/$katalog_jasnosc/g" /etc/apm-ext73/brightness
fi

#naprawa powerbtn
if [ "$(cat /etc/acpi/powerbtn.sh | grep '/usr/.../qdbus')" != "" ]; then
	sudo cp /etc/acpi/powerbtn.sh /etc/acpi/powerbtn.sh.bak -f
	sudo sed -i 's/\/usr\/...\/qdbus/\/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qdbus/' /etc/acpi/powerbtn.sh
	if [ "$(cat /etc/acpi/powerbtn.sh | grep '#\/sbin')" = "" ];then
		sudo sed -i '/Power button pressed/ s/\/sbin/#\/sbin/' /etc/acpi/powerbtn.sh
	fi
fi
#dodanie apm fixa do rc.local
sudo sed -i '/apm_status_fix/d' /etc/rc.local
sudo sed -i '/exit 0/d' /etc/rc.local
echo 'bash /opt/NeteXt73/APM/apm_status_fix' | sudo tee -a /etc/rc.local
echo 'exit 0' | sudo tee -a /etc/rc.local
rm -Rf /tmp/apm-ext73
#zmiana vsync
if [ "$vsync_on" = "FALSE" ]; then
	sudo cp /opt/NeteXt73/APM/drirc /home/$(cat /tmp/netext73/userek)/.drirc -f
	sudo chown $(cat /tmp/netext73/userek):$(cat /tmp/netext73/userek) /home/$(cat /tmp/netext73/userek)/.drirc
else
	sudo rm -f /home/$(cat /tmp/netext73/userek)/.drirc
fi
}

apm_zmiana(){
if [ "$apmik" = "stary" ]; then
	sudo chmod a-x /etc/pm/power.d/*
	sudo chmod a+x /etc/pm/power.d/$2
	sudo chown root:root /etc/pm/power.d/*
elif [ "$apmik" = "nowy" ]; then
	if [ "$(ls /sys/class/power_supply/*)" != "" ]; then
		katalog="/etc/udev/rules.d/50-udev-apm-ext73.rules"
	else
	#dodanie apm fixa do rc.local
		katalog="/etc/rc.local"
	fi
	sudo sed -i "s/conservative-conservative/$1/g" $katalog
	sudo sed -i "s/ondemand-ondemand/$1/g" $katalog
	sudo sed -i "s/intel-performance/$1/g" $katalog
	sudo sed -i "s/intel-powersave/$1/g" $katalog
	sudo sed -i "s/performance-conservative/$1/g" $katalog
	sudo sed -i "s/performance-ondemand/$1/g" $katalog
fi
if [ "$wifi_batt_fix" = "FALSE" ];then
	sudo sed -i 's/echo auto > \$ii/echo on > \$ii/g' $katalog_apm
else
	sudo sed -i 's/echo on > \$ii/echo auto > \$ii/g' $katalog_apm
fi

if [ "$bt_batt_on" = "FALSE" ];then
	sudo sed -i 's/echo 1 > \$bt/echo 0 > \$bt/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$bt/echo 1 > \$bt/g' $katalog_apm
fi

if [ "$wifi_n_on" = "TRUE" ];then
	sudo rm -f /etc/modprobe.d/wifi_n_on.conf
else
	echo 'options iwlwifi 11n_disable=1' | sudo tee /etc/modprobe.d/wifi_n_on.conf
	echo 'options ath9k nohwcrypt=1'  | sudo tee -a /etc/modprobe.d/wifi_n_on.conf
fi

if [ "$wifi_batt_on" = "FALSE" ];then
	sudo sed -i 's/echo 1 > \$wifi/echo 0 > \$wifi/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$wifi/echo 1 > \$wifi/g' $katalog_apm
fi

if [ "$rts5139_on" = "TRUE" ];then
	sudo sed -i '/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
else
	sudo sed -i '/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
fi
#intel turbo bateria
if [ "$turbo_batt_on" != "FALSE" ];then
	sudo sed -i 's/echo 1 > \$batintel/echo 0 > \$batintel/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$batintel/echo 1 > \$batintel/g' $katalog_apm
fi
#intel turbo AC
if [ "$turbo_ac_on" != "FALSE" ];then
	sudo sed -i 's/echo 1 > \$acintel/echo 0 > \$acintel/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$acintel/echo 1 > \$acintel/g' $katalog_apm
fi
#HDD
if [ "$hdd_scheduler" = "bfq" ];then
	sudo sed -i '/#HDD/ s/cfq/bfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/bfq/g' $katalog_apm
elif [ "$hdd_scheduler" = "cfq" ];then
	sudo sed -i '/#HDD/ s/bfq/cfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/cfq/g' $katalog_apm
elif [ "$hdd_scheduler" = "deadline" ];then
	sudo sed -i '/#HDD/ s/bfq/deadline/g' $katalog_apm
	sudo sed -i '/#HDD/ s/cfq/deadline/g' $katalog_apm
fi
#SSD
if [ "$ssd_scheduler" = "deadline" ];then
	sudo sed -i '/#SSD/ s/noop/deadline/g' $katalog_apm
elif [ "$ssd_scheduler" = "noop" ];then
	sudo sed -i '/#SSD/ s/deadline/noop/g' $katalog_apm
fi
#hibernacja
if [ "$hibernacja_menu" = "TRUE" ];then
	sudo cp /opt/NeteXt73/APM/com.ubuntu.enable-hibernate.pkla /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla -f
else
	if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then
		sudo rm -f /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla
	fi
fi
if [ "$apmik" = "nowy" ]; then
	sudo udevadm control --reload-rules
	sudo /etc/apm-ext73/./$(cat /etc/udev/rules.d/50-udev-apm-ext73.rules | sed 's/.*\///g' | grep adv | head -n 1 | awk '{print $1}')
fi
#zmiana vsync
if [ "$vsync_on" = "FALSE" ]; then
	sudo cp /opt/NeteXt73/APM/drirc /home/$(cat /tmp/netext73/userek)/.drirc -f
	sudo chown $(cat /tmp/netext73/userek):$(cat /tmp/netext73/userek) /home/$(cat /tmp/netext73/userek)/.drirc
else
	sudo rm -f /home/$(cat /tmp/netext73/userek)/.drirc
fi
}

apm_zmiana_config(){
if [ "$(grep wifi_batt_fix ~/.netext73/apm_status | cut -d ' ' -f 2)" = "FALSE" ];then
	sudo sed -i 's/echo auto > \$ii/echo on > \$ii/g' $katalog_apm
else
	sudo sed -i 's/echo on > \$ii/echo auto > \$ii/g' $katalog_apm
fi

if [ "$(grep bt_batt_on ~/.netext73/apm_status | cut -d ' ' -f 2)" = "FALSE" ];then
	sudo sed -i 's/echo 1 > \$bt/echo 0 > \$bt/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$bt/echo 1 > \$bt/g' $katalog_apm
fi

if [ "$(grep wifi_n_on ~/.netext73/apm_status | cut -d ' ' -f 2)" = "TRUE" ];then
	sudo rm -f /etc/modprobe.d/wifi_n_on.conf
else
	echo 'options iwlwifi 11n_disable=1' | sudo tee -a /etc/modprobe.d/wifi_n_on.conf
	echo 'options ath9k nohwcrypt=1'  | sudo tee -a /etc/modprobe.d/wifi_n_on.conf
fi

if [ "$(grep wifi_batt_on ~/.netext73/apm_status | cut -d ' ' -f 2)" = "FALSE" ];then
	sudo sed -i 's/echo 1 > \$wifi/echo 0 > \$wifi/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$wifi/echo 1 > \$wifi/g' $katalog_apm
fi

#intel turbo bateria
if [ "$(grep turbo_batt_on ~/.netext73/apm_status | cut -d ' ' -f 2)" != "FALSE" ];then
	sudo sed -i 's/echo 1 > \$batintel/echo 0 > \$batintel/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$batintel/echo 1 > \$batintel/g' $katalog_apm
fi
#intel turbo AC
if [ "$(grep turbo_ac_on ~/.netext73/apm_status | cut -d ' ' -f 2)" != "FALSE" ];then
	sudo sed -i 's/echo 1 > \$actintel/echo 0 > \$acintel/g' $katalog_apm
else
	sudo sed -i 's/echo 0 > \$acintel/echo 1 > \$acintel/g' $katalog_apm
fi

if [ "$(grep rts5139_on ~/.netext73/apm_status | cut -d ' ' -f 2)" = "TRUE" ];then
	sudo sed -i '/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
	sudo sed -i '1,/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
else
	sudo sed -i '/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' $katalog_apm
fi
#HDD
if [ "$(grep hdd_scheduler ~/.netext73/apm_status | cut -d ' ' -f 2)" = "bfq" ];then
	sudo sed -i '/#HDD/ s/cfq/bfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/bfq/g' $katalog_apm

elif [ "$(grep hdd_scheduler ~/.netext73/apm_status | cut -d ' ' -f 2)" = "cfq" ];then
	sudo sed -i '/#HDD/ s/bfq/cfq/g' $katalog_apm
	sudo sed -i '/#HDD/ s/deadline/cfq/g' $katalog_apm

elif [ "$(grep hdd_scheduler ~/.netext73/apm_status | cut -d ' ' -f 2)" = "deadline" ];then
	sudo sed -i '/#HDD/ s/bfq/deadline/g' $katalog_apm
	sudo sed -i '/#HDD/ s/cfq/deadline/g' $katalog_apm
fi
#SSD
if [ "$(grep ssd_scheduler ~/.netext73/apm_status | cut -d ' ' -f 2)" = "deadline" ];then
	sudo sed -i '/#SSD/ s/noop/deadline/g' $katalog_apm

elif [ "$(grep ssd_scheduler ~/.netext73/apm_status | cut -d ' ' -f 2)" = "noop" ];then
	sudo sed -i '/#SSD/ s/deadline/noop/g' $katalog_apm
fi
#zmiana hibernacji
if [ "$(grep hibernacja ~/.netext73/apm_status | cut -d ' ' -f 2)" = "TRUE" ];then
	sudo cp /opt/NeteXt73/APM/com.ubuntu.enable-hibernate.pkla /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla -f
else
	if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then
		sudo rm -f /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla
	fi
fi
if [ "$apmik" = "nowy" ]; then
	sudo udevadm control --reload-rules
	sudo /etc/apm-ext73/./$(cat /etc/udev/rules.d/50-udev-apm-ext73.rules | sed 's/.*\///g' | grep adv | head -n 1 | awk '{print $1}')
fi
#zmiana vsync
if [ "$(grep vsync ~/.netext73/apm_status | cut -d ' ' -f 2)" = "FALSE" ];then
	sudo cp /opt/NeteXt73/APM/drirc /home/$(cat /tmp/netext73/userek)/.drirc -f
	sudo chown $(cat /tmp/netext73/userek):$(cat /tmp/netext73/userek) /home/$(cat /tmp/netext73/userek)/.drirc
else
	sudo rm -f /home/$(cat /tmp/netext73/userek)/.drirc
fi
}

stan_apm(){
if [ "$apmik" = "stary" ]; then
	if [ "$(ls /etc/pm/power.d/ | wc -l)" != "6" ]; then
		stan_apm="-"
	else
		if [ -e /etc/pm/power.d/$wersja_apm1*$wersja_apm ]; then
			stan_apm=$(ls /etc/pm/power.d/advanced_power_management_by_ext73* -Fl | grep '*' | cut -d '_' -f 6)
		else
			stan_apm="-"
		fi
	fi

	if [ "$(ls /etc/pm/power.d/ | wc -l)" = "6" ] && [ $( ls /usr/lib/pm-utils/power.d/ -la | grep rwxr | grep -v drwxr-xr-x | wc -l) != "2" ]; then 
		stan_apm="-"
	fi
elif [ "$apmik" = "nowy" ]; then
	twoj_apm=$(ls $katalog_apm | cut -d "_" -f 7 | head -n 1)
	if [ -e /etc/apm-ext73/ ] && [ "$(ls /etc/apm-ext73/ | wc -l)" != "11" ] || [ "$twoj_apm" != "$wersja_apm" ] ; then
		stan_apm="-"
	else
		if [ -e /etc/udev/rules.d/50-udev-apm-ext73.rules ]; then
			stan_apm=$(cat /etc/udev/rules.d/50-udev-apm-ext73.rules | grep advanced_power_management | head -n 1 | sed 's/.*\///' | cut -d '_' -f 6)
		else
			stan_apm="-"
		fi
	fi
fi
if [ "$(grep apm_status_fix /etc/rc.local)" = "" ]; then
	    stan_apm="-"
fi
}

stan_apm_config(){
	#sprawdzenie stanu APM wifi FIX
	if [ "$(grep 'echo auto > $ii' $katalog_apm)" = "" ];then
		export wifi_batt_fix="FALSE"
	else
		export wifi_batt_fix="TRUE"
	fi
	#włączenie wyłączenie wifi
	if [ "$(grep 'echo 1 > $wifi' $katalog_apm)" = "" ];then
		export wifi_batt_on="FALSE"
	else
		export wifi_batt_on="TRUE"
	fi

	#sprawdzenie stanu bt FIX
	if [ "$(grep 'echo 1 > $bt' $katalog_apm)" = "" ];then
		export bt_batt_on="FALSE"
	else
		export bt_batt_on="TRUE"
	fi

	#sprawdzenie stanu APM rts5139 FIX
	if [ "$(grep 'sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb' $katalog_apm)" = "" ];then
		export rts5139_on="FALSE"
	else
		export rts5139_on="TRUE"
	fi
	#sprawdzenie wifi N
	if [ -e /etc/modprobe.d/wifi_n_on.conf ] ;then
		export wifi_n_on="FALSE"
	else
		export wifi_n_on="TRUE"
	fi
	#sprawdzenie intel turbo bateria
	if [ "$(grep 'echo 1 > $batintel' $katalog_apm)" != "" ];then
		export turbo_batt_on="FALSE"
	else
		export turbo_batt_on="TRUE"
	fi
	#sprawdzenie intel turbo AC
	if [ "$(grep 'echo 1 > $acintel' $katalog_apm)" != "" ];then
		export turbo_ac_on="FALSE"
	else
		export turbo_ac_on="TRUE"
	fi
	#sprawdzenie BFQ/CFQ/deadline HDD

	if [ "$(grep none /sys/block/sd*/queue/scheduler)" != "" ]; then
		hdd_scheduler_menu="blk-mq"
		ssd_scheduler_menu="blk-mq"
	else
		if [ "$(grep bfq /sys/block/sda/queue/scheduler)" != "" ]; then
			if [ "$(grep 'bfq' $katalog_apm)" != "" ] ;then
				export hdd_scheduler="bfq"; export hdd_scheduler_menu="bfq!cfq!deadline"
			elif [ "$(grep 'cfq' $katalog_apm)" != "" ]; then
				export hdd_scheduler="cfq"; export hdd_scheduler_menu="cfq!bfq!deadline"
			elif [ "$(grep 'deadline' $katalog_apm)" != "" ]; then
				export hdd_scheduler="deadline"; export hdd_scheduler_menu="deadline!bfq!cfq"
			fi
		else
			if [ "$(grep 'bfq' $katalog_apm)" != "" ] ;then
				export hdd_scheduler="bfq"; export hdd_scheduler_menu="cfq!deadline"
			elif [ "$(grep 'cfq' $katalog_apm)" != "" ]; then
				export hdd_scheduler="cfq"; export hdd_scheduler_menu="cfq!deadline"
			elif [ "$(grep 'deadline' $katalog_apm)" != "" ]; then
				export hdd_scheduler="deadline"; export hdd_scheduler_menu="deadline!cfq"
			fi
		fi

		#sprawdzenie noop/deadline SSD
		if [ "$(grep 'noop' $katalog_apm | grep '#SSD' )" != "" ] ;then
			export ssd_scheduler="noop"; export ssd_scheduler_menu="noop!deadline"
		elif [ "$(grep 'deadline' $katalog_apm | grep '#SSD')" != "" ]; then
			export ssd_scheduler="deadline"; export ssd_scheduler_menu="deadline!noop"
		fi
	fi
	#sprawdzanie hibernacji
	if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then
		hibernacja_menu="TRUE"
	else
		hibernacja_menu="FALSE"
	fi
	#sprawdzenie vsync
	if [ -e /home/$(cat /tmp/netext73/userek)/.drirc ]; then
		export vsync_on="FALSE"
	else
		export vsync_on="TRUE"
	fi

	export wifi_n_on_przed=$wifi_n_on
	export wifi_batt_fix_przed=$wifi_batt_fix
	export wifi_batt_on_przed=$wifi_batt_on
	export bt_batt_on_przed=$bt_batt_on
	export rts5139_on_przed=$rts5139_on
	export hdd_scheduler_przed=$hdd_scheduler
	export ssd_scheduler_przed=$ssd_scheduler
	export turbo_batt_on_przed=$turbo_batt_on
	export turbo_ac_on_przed=$turbo_ac_on
	export hibernacja_menu_przed=$hibernacja_menu
	export vsync_on_przed=$vsync_on

	#wysłanie danych do configu
	if [ "$1" = "czeki" ]; then
		if [ "$apmik" = "stary" ]; then
			ls /etc/pm/power.d/ -Fl | grep '*' | awk '{print $9}' | sed -e 's/*//' -e 's/advanced_power_management_by_ext73_//' -e 's/_v.*//' > ~/.netext73/apm_status
		elif [ "$apmik" = "nowy" ]; then
			cat /etc/udev/rules.d/50-udev-apm-ext73.rules | grep advanced_power_management_by_ext73_ | head -n 1 | cut -d '_' -f 9 > ~/.netext73/apm_status
		fi
		echo "wifi_batt_fix 	$wifi_batt_fix" >> ~/.netext73/apm_status
		echo "wifi_batt_on 	$wifi_batt_on" >> ~/.netext73/apm_status
		echo "bt_batt_on 	$bt_batt_on">> ~/.netext73/apm_status
		echo "rts5139_on 	$rts5139_on" >> ~/.netext73/apm_status
		echo "wifi_n_on 	$wifi_n_on" >> ~/.netext73/apm_status
		echo "hdd_scheduler 	$hdd_scheduler" >> ~/.netext73/apm_status
		echo "ssd_scheduler 	$ssd_scheduler" >> ~/.netext73/apm_status
		echo "turbo_batt_on 	$turbo_batt_on" >> ~/.netext73/apm_status
		echo "turbo_ac_on 	$turbo_ac_on" >> ~/.netext73/apm_status
		echo "hibernacja 	$hibernacja_menu" >> ~/.netext73/apm_status
		echo "vsync_on 	$vsync_on" >> ~/.netext73/apm_status
	fi
}

apm_usun(){
echo "echo \"$TEXT_PROCEDURA_9\""
echo "sudo rm -f /etc/systemd/system/hibernate.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/systemd/system/hybrid-sleep.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/systemd/system/suspend.target.wants/apm_ext73-*"
echo "sudo rm -f /etc/udev/rules.d/40-wol-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/50-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/70-brightness-udev-apm-ext73.rules"
echo "sudo rm -f /etc/udev/rules.d/80-xfs-udev-apm-ext73.rules"
echo "sudo rm -rf /etc/apm-ext73"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
echo "sudo rm -fr /etc/pm/power.d/advanced_power_management_by_ext73* /usr/lib/pm-utils/power.d/readahead"
echo "sudo chmod a+x /usr/lib/pm-utils/power.d/*"
echo "sudo chmod a+x /etc/apm/event.d/20hdparm"
echo "sudo chown root:root /usr/lib/pm-utils/power.d/*"
echo "sudo chown root:root /etc/apm/event.d/20hdparm"
#przywrócenie powerbtn
echo "if [ -e /etc/acpi/powerbtn.sh.bak ]; then"
echo "sudo mv /etc/acpi/powerbtn.sh.bak /etc/acpi/powerbtn.sh -f"
echo "sudo chmod a+x /etc/acpi/powerbtn.sh"
echo "sudo chown root:root /etc/acpi/powerbtn.sh"
echo "fi"
echo "sudo update-rc.d -f ondemand defaults"
echo "sudo /etc/init.d/ondemand start"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
#usunięcie hibernacji
echo "if [ -e /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla ]; then"
echo "sudo rm -f /var/lib/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla"
echo "fi"
}

usun_kernel(){
echo "echo \"$TEXT_KERNEL1\""
echo "echo \"$(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' )\""
echo "sudo apt-get purge -y $(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' | tr '\n' ' ')"
echo "sudo update-grub"
echo "rm /tmp/netext73/*.txt -f; rm /tmp/netext73/*.sh -f"
}


#data i godzina
data_godzina(){
	export godzina=$(date +\"%Y%m%d_%H%m%S\")
}

#instalacja za chwile nastąpi wprowadzenie zmian
instalacja(){
data_godzina
xterm -T instalator -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && tput setaf 1;echo \"$TEXT_INSTALACJA1\";tput sgr0; bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f ;tput setaf 2; echo -e \"$TEXT_INSTALACJA2\"; sleep 5; echo 'tak' > /tmp/netext73/ok.txt" 
}

#instalacja bez pytań
instalacja2(){
data_godzina
#x-terminal-emulator -e bash -c "bash instaluj.sh && rm instaluj.sh -f"
xterm -T instalator -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f"
}

#instalacja wciśnij enter
instalacja3(){
data_godzina
xterm -T instalator -e bash -c "cp -f instaluj.sh /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalujsh_$godzina.log && sudo bash instaluj.sh 2>&1 | tee -a /home/$(cat /tmp/netext73/userek)/.netext73/logi/instalacja_$godzina.log && rm instaluj.sh -f ;tput setaf 2; echo -e \"$TEXT_INSTALACJA2\"; sleep 5; echo 'tak' > /tmp/netext73/ok.txt"
}

lista_kerneli(){
cd /tmp/netext73
if [ "$1" = "update" ]; then
	if [ "$kernel_premium" = "tak" ] ; then
		wget --user=$US1 --password=$PASS1  $adres_glowny/kernele_premium2/ -O kernel.txt | wget https://www.kernel.org/ -O stable.txt 2>&1 | pobieranie
	else
		wget $adres_glowny/kernele/ -O kernel.txt | wget https://www.kernel.org/ -O stable.txt 2>&1 | pobieranie
	fi
else
	#tu zmienić
	echo $kern > ~/.netext73/instalator_kerneli #zapamiętanie wybranego kernela
	if [ "$premium" = "tak" ]; then 
		if [ "$kernel_premium" = "tak" ]; then
			strona="$adres_glowny/kernele_premium$katalog2/"
		else
			str=""
			##
			strona=$(yad --center --entry --width=$((610*$skala)) --window-icon="/opt/NeteXt73/ikony/linux.png" --title="$nazwa_skryptu" --text="$TEXT_STRONA1" --entry-text="$str" --button="gtk-ok:0" --button="$TEXT_POWROT:1")
			klawisz=$?
			if [ "$klawisz" = "1" ]; then
				exit 1
			else
				if [ "$strona" != "" ]; then
					if [ $? = 0 ]; then
						echo $strona > ~/.netext73/kernel_premium
						if [ "$strona" != "" ]; then
							strona="$adres_glowny/kernele_premium$katalog2/"
							export US1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 1) 
							export PASS1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 3)
							kernel_premium="tak"
						fi
					fi
				fi
			fi
		fi
		rm index.html -f; wget --user=$US1 --password=$PASS1  $adres_glowny/kernele_premium$katalog2/ 2>&1 | pobieranie 
	else
		strona="$adres_glowny/kernele/"
		rm index.html -f; wget $strona 2>&1 | pobieranie 
	fi
	echo $(grep 'href="ftp' index.html | grep 'v' | grep -v "logi" | cut -d '"' -f 2 | sed -e 's/.*v/v/g' -e 's/\///g') | tr ' ' '\n' > 2.txt
	dpkg -l |grep linux-image | awk '{print $2}' | grep $rodzaj | sed 's/linux-image-//g'  > 3.txt

	for kernel in $(cat 2.txt); do
		echo "$kernel" >> 4.txt
		for kernel1 in $(cat 3.txt); do
		      if [ "$(echo $kernel | grep $(echo $kernel1 | sed "s/-$rodzaj.*//g"))" != "" ]; then
			  if [ "$(echo $kernel1 | grep pro )" != "" ] && [ "$(echo $rodzaj | grep pro)" = "" ]; then
				  echo "nic" > /dev/null
			  else
				  sed 4.txt -i -e "s/$kernel/$kernel tak/g"
			  fi
		      fi
		done
	done
	cat 4.txt | awk '{print $2}' >5.txt; sed -i 's/^[ \t]*$/-/' 5.txt
	paste -d " "  2.txt 5.txt > 4.txt
	sort -r 4.txt > 3.txt;  echo $(sed -e '/^[^#]/s:^:FALSE :' 3.txt) > 1.txt
	lista=$(sed  's/FALSE/TRUE/' 1.txt ); rm *.txt -f
	a1="-"
	blad=0
	if [ "$(echo $lista)" = "TRUE" ]; then
		yad --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="$TEXT_SERVER_ERROR"
		blad=1
	else
		aa=$(yad --center --height=$((340*$skala)) --width=$((690*$skala)) --window-icon="/opt/NeteXt73/ikony/linux.png" --title="$nazwa_skryptu" --text="$TEXT_PLATFORMA1 <b><span color=\"$kolor_textu\">$rodzaj</span></b>$TEXT_PLATFORMA2" --column="$TEXT_ZAZNACZ" --column="$TEXT_WYBIERZ_KERNEL" --column="$TEXT_ZNITY1" --button="$TEXT_POWROT:1" --button="gtk-ok:0" --list --radiolist $lista)
		klawisz=$?
		a=$(echo $aa | cut -d "|" -f 2)	 #wybrany kernel
		a1=$(echo $aa | cut -d "|" -f 3) #czy zainstalowany jeżeli '-' można instalować
	fi
fi
}

sprawdz_kernel(){
lista_kerneli update
#sprawdzanie kerneli od wersji v30.x
if [ "$(uname -r | grep ext | grep pro )" != "" ];then
	twoj_kernel="e X t 7 3 - pro v$(uname -r | cut -d "-" -f 3)-$(uname -r | cut -d '-' -f 1)"
elif [ "$(uname -r | grep ext )" != "" ];then
	twoj_kernel="e X t 7 3 v$(uname -r| cut -d "-" -f 3)-$(uname -r | cut -d '-' -f 1)"
else
	twoj_kernel=$(uname -r)
fi

nowy_kernel=$(grep 'href="ftp' kernel.txt | cut -d '"' -f 2 | sort -r | head -n 1 | sed 's/.*v...._//' | sed 's/\///g')
kern1="$(echo $nowy_kernel | sed 's/_testowy.*//g' | sed 's/_stabilny.*//g' | cut -d "-" -f 3)-$(echo  $nowy_kernel | cut -d "-" -f 1 )"
kern2="$(echo $nowy_kernel | cut -d "-" -f 1 )-ext73-$(echo $nowy_kernel | sed 's/_testowy.*//g' | sed 's/_stabilny.*//g' | cut -d "-" -f 3)"
}

grub(){
echo "echo \"$TEXT_PROCEDURA_13\""
echo "echo \"$TEXT_GRUB1 /etc/default/grub\"; sudo sed -i '/GRUB_CMDLINE_LINUX=/d' $sciezka/grub"
echo "echo \"$TEXT_GRUB2 /etc/default/grub\"; sudo sed \"/GRUB_CMDLINE_LINUX_DEFAULT/a\GRUB_CMDLINE_LINUX=\\\"$wpis_grub\\\"\" $sciezka/grub > /tmp/netext73/grub1"
echo "sudo mv /tmp/netext73/grub1 $sciezka/grub -f"
echo "if [ \"\$grub_pro\" != \"tak\" ]; then"
echo "if [ \"\$(cat /etc/default/grub | grep '#GRUB_HIDDEN_TIMEOUT=')\" = \"\" ]; then"
echo "sudo sed -i 's/GRUB_HIDDEN_TIMEOUT=/#GRUB_HIDDEN_TIMEOUT=/g' /etc/default/grub"
echo "fi"
echo "if [ \"\$w3\" != \"\" ]; then"
echo "sudo sed /etc/default/grub -i -e \"s/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=$w3/\""
echo "fi"
echo "sudo sed -i -e \"s/.*GRUB_GFXMODE=.*/GRUB_GFXMODE=$w4/\" /etc/default/grub"
echo "if [ \"\$w5\" != \"\" ];then"
echo "sudo sed -i -e \"s/.*GRUB_GFXPAYLOAD_LINUX=.*/GRUB_GFXPAYLOAD_LINUX=$w5/\" /etc/default/grub"
echo "fi"
echo "sudo sed -i '/GRUB_BACKGROUND/ d'  /etc/default/grub"
echo "if [ \"\$grub_back\" = \"TRUE\" ]; then"
echo "echo 'GRUB_BACKGROUND=/opt/NeteXt73/menu/grub_background.png' | sudo tee -a /etc/default/grub"
echo "fi"
echo "fi"
echo "if [ \"\$starter\" != \"default\" ];then"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=\\\"$wpis_nowy\\\"/\" /etc/default/grub"
echo "else"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=0/\" /etc/default/grub"
echo "fi"
echo "sudo chown root:root /etc/default/grub"
#nogpumanager dla 15.10
echo "if [ \"\$(lsb_release -a | grep 15.10)\" != \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i wily)\" != \"\" ]; then"
echo "if [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "sudo mv /etc/X11/xorg.conf /etc/X11/xorg.conf_backup -f"
echo "if [ \"\$(grep nogpumanager /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ nogpumanager\"/' /etc/default/grub"
echo "fi"
echo "fi"
echo "fi"
echo "sudo update-grub"
echo "echo 'tak' > /tmp/netext73/ok.txt"

}

instaluj_grub(){
echo "echo \"$TEXT_PROCEDURA_13\"'"
echo "nie" > /tmp/netext73/ok.txt
naglowek > /tmp/netext73/instaluj.sh
grub >> /tmp/netext73/instaluj.sh
instalacja2
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
	dymek -i $ikona_info1 "$TEXT_INFORMACJA" "$TEXT_GRUB2 $sciezka/grub. $TEXT_WYMAGANY_RESTART"
else
	dymek -i $warning1 "$TEXT_UWAGA" "$TEXT_GRUB3"
fi
}

wywal_pobrane_pliki_kernela(){
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
	yad --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="$TEXT_KERNEL2"
	rm -rf $PWD
elif  [ "$(cat /tmp/netext73/ok.txt)" = "nie" ]; then
	dymek -i $ikona_info1 "$TEXT_UWAGA" "$TEXT_INFO2<br>/tmp/netext73/$a"
fi
}

radeon(){
echo "echo \"$TEXT_PROCEDURA_14\""
echo "sudo apt-get install lib32gcc1 libc6-i386"
echo "sudo dpkg -P fglrx fglrx-amdcccle fglrx-core xvba-va-driver"
echo "/usr/bin/yes | sudo dpkg -i *.deb"
echo "sudo apt-get install fglrx-pxpress vainfo -y"
echo "if [ \"\$(ls | grep 14.9)\" != \"\" ] || [ \"\$(ls | grep 14.41)\" != \"\" ]; then"
echo "sudo apt-get install xvba-va-driver -y"
echo "else"
echo "sudo apt-get install vdpau-va-driver -y"
echo "fi"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "sudo apt-get install -f"
echo "rm *.deb -f"
}


nvidia_naglowek(){
echo "echo \"$TEXT_PROCEDURA_15\""
echo "dpkg -l | grep nvidia  | awk '{print \$2}' > nv.txt"
echo "dpkg -l | grep libcuda1| awk '{print \$2}' >> nv.txt"
}

nvidia(){
echo "sudo dpkg -r \$(cat nv.txt | tr '\\n' ' ')"
echo "sudo apt-get install lib32gcc1 libvdpau1 libpango-1.0-0 x11-common make sed dkms linux-libc-dev libc6-dev patch acpid libc6-i386 passwd adduser pkg-config screen-resolution-extra libatk1.0-0 libc6 libcairo-gobject2 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libgtk2.0-0 libjansson4  libpangocairo-1.0-0 libpangoft2-1.0-0 libx11-6 libxnvctrl0 libxxf86vm1 -y"
echo "if [ \"\$(dpkg -l | grep bumblebee)\" = \"\" ];then"
echo "sudo apt-get install nvidia-prime"
echo "fi"
echo "sudo apt-get -f install pkg-config screen-resolution-extra -y"
echo "/usr/bin/yes | sudo dpkg -i nvidia-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i libcuda1-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i nvidia-opencl-icd-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep nvidia-settings)"
echo "/usr/bin/yes | sudo dpkg -i --force-all nvidia-libopencl1-$wersja_nvidia.deb"
}
 
nvidia_optimus(){
echo "sudo dpkg -P \$(cat nv.txt | tr '\\n' ' ')"
echo "sudo apt-get install lib32gcc1 bumblebee primus primus-libs primus-libs:i386 primus-libs-ia32:i386 x11-common make sed dkms linux-libc-dev libc6-dev patch acpid libc6-i386 passwd adduser pkg-config screen-resolution-extra libvdpau1 libatk1.0-0 libc6 libcairo-gobject2 libcairo2 libfontconfig1 libfreetype6 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libgtk2.0-0 libjansson4 libpango-1.0-0 -y" libpangocairo-1.0-0 libpangoft2-1.0-0 libx11-6 libxnvctrl0 libxxf86vm1
echo "wget \$adres_sterownikow_optimus/usr/lib/x86_64-linux-gnu/primus/libGL.so.1"
echo "sudo cp libGL.so.1 /usr/lib/x86_64-linux-gnu/primus/libGL.so.1 -f"
echo "rm libGL.so.1 -f"
echo "wget \$adres_sterownikow_optimus/usr/lib/i386-linux-gnu/primus/libGL.so.1"
echo "sudo cp libGL.so.1 /usr/lib/i386-linux-gnu/primus/libGL.so.1 -f"
echo "rm libGL.so.1 -f"
echo "/usr/bin/yes | sudo dpkg -i nvidia-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i libcuda1-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i nvidia-opencl-icd-$wersja_nvidia.deb"
echo "/usr/bin/yes | sudo dpkg -i \$(ls | grep nvidia-settings)"
echo "/usr/bin/yes | sudo dpkg -i --force-all nvidia-libopencl1-$wersja_nvidia.deb"
echo "wget \$adres_sterownikow_optimus/etc/bumblebee/bumblebee.conf"
echo "wget \$adres_sterownikow_optimus/etc/bumblebee/xorg.conf.nvidia"
echo "sudo cp xorg.conf.nvidia bumblebee.conf /etc/bumblebee/ -f"
echo "rm bumblebee.conf xorg.conf.nvidia -f"
echo "if [ \"\$(lsb_release -a | grep 15.10)\" = \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i wily)\" = \"\" ]; then"
echo "wget \$adres_sterownikow_optimus/etc/modprobe.d/bumblebee.conf"
echo "sudo cp bumblebee.conf /etc/modprobe.d/bumblebee.conf -f"
echo "rm bumblebee.conf -f"
echo "fi"
echo "wget \$adres_sterownikow_optimus/usr/sbin/bumblebeed"
echo "wget \$adres_sterownikow_optimus/usr/bin/optirun"
echo "sudo cp -f bumblebeed /usr/sbin/bumblebeed"
echo "sudo cp -f optirun /usr/bin/optirun"
echo "rm -f optirun bumblebeed"
echo "sudo chmod a+x /usr/sbin/bumblebeed /usr/bin/optirun"
echo "sudo chown root:root /usr/sbin/bumblebeed /usr/bin/optirun"
echo "export wersja_sterownika=\"\$(ls /tmp/netext73 | grep tar.xz | cut -d '_' -f 1 | cut -d '-' -f 2 | head -n 1)\""
echo "if [ \"\$(grep 'nvidia-updates-' /etc/bumblebee/bumblebee.conf)\" = \"\" ];then"
echo "sudo sed -i \"s/nvidia-.../nvidia-\$wersja_sterownika/g\" /etc/bumblebee/bumblebee.conf"
echo "else"
echo "sudo sed -i \"s/nvidia-updates-.../nvidia-\$wersja_sterownika/g\" /etc/bumblebee/bumblebee.conf"
echo "fi"
echo "sudo sed -i \"/BusID/ s/PCI:..:..:./PCI:$(lspci | egrep 'VGA|3D' | grep -i 'nvidia' | awk '{print $1}')/g\" /etc/bumblebee/xorg.conf.nvidia"
echo "sudo sed -i '/BusID/ s/\./:/g' /etc/bumblebee/xorg.conf.nvidia"
}

nvidia_stopka(){
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "cd /tmp/netext73"
echo "rm -f *.tar.xz"
echo "rm -rf nvidia-*"
echo "if [ \"\$(grep '#GRUB_GFXMODE' /etc/default/grub)\" != \"\" ]; then"
echo "sudo sed -i 's/#GRUB_GFXMODE.*/GRUB_GFXMODE=1024x768/' /etc/default/grub"
echo "fi"
echo "if [ \"\$(grep 'GRUB_GFXPAYLOAD_LINUX' /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i \"s/GRUB_GFXMODE.*/GRUB_GFXMODE=1280x1024\nGRUB_GFXPAYLOAD_LINUX=1024x768/\" /etc/default/grub"
echo "fi"
echo "sudo update-initramfs -u -k all"
echo "sudo update-grub"
echo "if [ -e /usr/share/applications/nvidia-settings.desktop ] && [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "sudo sed -i 's/Exec=.*/Exec=optirun -b none nvidia-settings -c :8/g' /usr/share/applications/nvidia-settings.desktop"
echo "fi"
echo "if [ -e /etc/X11/xorg.conf.\$(date +\"%m%d%Y\") ]; then"
echo "sudo mv /etc/X11/xorg.conf.\$(date +\"%m%d%Y\") /etc/X11/xorg.conf"
echo "fi"
#usunięcie xorg 15.10
echo "if [ \"\$(lsb_release -a | grep 15.10)\" != \"\" ] || [ \"\$(echo \$WERSJA_UBUNTU | grep -i wily)\" != \"\" ]; then"
echo "if [ \"\$(lspci | grep -i VGA | grep -i Intel)\" != \"\" ] && [ \"\$(lspci | grep -i GeForce | grep -i NVIDIA)\" != \"\" ];then"
echo "sudo mv /etc/X11/xorg.conf /etc/X11/xorg.conf_backup -f"
echo "echo \"manual\" | sudo tee /etc/init/gpu-manager.override"
#nogpumanager
echo "if [ \"\$(grep nogpumanager /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i '/GRUB_CMDLINE_LINUX=/ s/\"$/ nogpumanager\"/' /etc/default/grub"
echo "fi"
echo "fi"
echo "fi"
echo "sudo update-grub"
}

restart(){
echo "tete"
yad --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_RESTART"
	if [ $? = 0 ]; then
		cd /opt/NeteXt73 && ./NeteXt73_root reboot
	fi
}


sprawdz_klucze(){
#xterm -T GPG-KEY -e bash -c "echo 'sudo apt-key list';
sudo apt-key list > klucze1.txt
}
usun_klucze(){
xterm -T GPG-KEY -e bash -c "echo 'Podaj hasło aby usunąć zaznaczone klucze'; for i in \$(cat usun.txt); do sudo apt-key del \$i; done ; echo 'sudo apt-key list' ; sudo apt-key list > klucze1.txt"
}

klucze(){
echo "sudo apt-get update 2> /tmp/netext73/updateresults"
echo "MISSINGKEYS=\$(cat /tmp/netext73/updateresults)"
echo "if [[ \$MISSINGKEYS ]]; then"
echo "echo 'Trying to import all the missing keys'"
echo "IFS=\$'\\n'"
echo "n=1"
echo "while read curline; do"
echo "	GPGKEYTOGET=\$(echo \$curline | grep NO_PUBKEY | sed -e 's/.*: \|NO_PUBKEY //g')"
echo "	apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys \$GPGKEYTOGET"
echo "	let n=n+1"
echo "done < /tmp/netext73/updateresults"
echo "fi"
echo "rm -f /tmp/netext73/updateresults"
echo "sudo apt-get update"
}

napraw_klucze(){
echo "echo -e \"$a4\\n\"; sudo apt-get clean; sudo mv /var/lib/apt/lists /tmp/netext73; sudo mkdir /var/lib/apt/lists; sudo apt-get update; sudo rm -rf /tmp/netext73/lists"
}

stan_baterii(){
info_o_baterii=$(cat /sys/class/power_supply/BAT*/uevent )
Stan_baterii="Battery status"; licznik=1

for a in "POWER_SUPPLY_NAME" "POWER_SUPPLY_STATUS" "POWER_SUPPLY_TECHNOLOGY" "POWER_SUPPLY_MODEL_NAME" "POWER_SUPPLY_MANUFACTURER" "POWER_SUPPLY_SERIAL_NUMBER" "POWER_SUPPLY_VOLTAGE_MIN_DESIGN" "POWER_SUPPLY_VOLTAGE_NOW" "POWER_SUPPLY_CAPACITY"; do
	if [ "$(grep pol ~/.netext73/jezyk)" = "" ]; then
		bar[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 1)"
		bar[10]="POWER_SUPPLY_FULL_CAPACITY"
	fi
	stan[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 2)"
	((licznik++))
done

#pojemność
if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_CHARGE_FULL_DESIGN)" != "" ]; then
	bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/1000" | bc -q)"
	bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_NOW= | cut -d '=' -f 2)/1000" | bc -q)"
	jednostka="mAh"
else
	bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/1000000" | bc -q)"
	bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_NOW= | cut -d '=' -f 2)/1000000" | bc -q)"
	jednostka="Wh"
fi
#zmiana języka
#jezyczek
if [ "$(grep pol ~/.netext73/jezyk)" != "" ]; then
	Stan_baterii="Stan baterii"
	bar[1]="Nazwa baterii"
	bar[2]="Tryb pracy baterii"
	bar[3]="Rodzaj baterii"
	bar[4]="Model baterii"
	bar[5]="Producent baterii"
	bar[6]="Nr seryjny baterii"
	bar[7]="Konstrukcyjne napięcie baterii"
	bar[8]="Aktualne napięcie baterii"
	bar[9]="Aktualna pojemność baterii"
	bar[10]="Maksymalny poziom naładowania baterii"
	if [ "$(echo ${stan[2]})" = "Discharging" ];then
		stan[2]="Rozładowywanie"
	elif [ "$(echo ${stan[2]})" = "Charging" ];then
		stan[2]="Ładowywanie"
	elif [ "$(echo ${stan[2]})" = "Full" ];then
		stan[2]="Pełna"
	else
		stan[2]="Nieznany"
	fi
	if [ "$(echo ${stan[3]})" = "Unknown" ];then
		stan[3]="Nieznany"
	fi
fi
#przeliczanie napięcia na V
stan[7]=$(echo "scale=2; ${stan[7]}/1000000" | bc -q)
stan[8]=$(echo "scale=2; ${stan[8]}/1000000" | bc -q)

if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_ENERGY_FULL_DESIGN)" != "" ]; then
	poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
	poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/10000" | bc -q)
	if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
		stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
		stan[9]=$(echo "scale=0; 100*$bateria_teraz/$bateria_full" | bc -q)
	else
		stan[10]=0
		stan[9]=0
	fi
else
	poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
	poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/10000" | bc -q)
	if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
		stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
		stan[9]=$(echo "scale=0; 100*$bateria_teraz/$bateria_full" | bc -q)
	else
		stan[10]=0
		stan[9]=0
	fi
fi
for i in $(seq 1 2); do
	for a in $(seq 1 $(($licznik-3))); do
		echo "$a:#${stan[$a]}"
	done

	echo "7:#${stan[7]} V"; echo "7:${stan[7]}" # V baterii
	echo "8:#${stan[8]} V"; echo "8:${stan[8]}" # V baterii
	echo "9:#${stan[9]} %      $bateria_teraz $jednostka"; echo "9:${stan[9]}" # % baterii
	echo "10:#${stan[10]} %        $bateria_full $jednostka"; echo "10:${stan[10]}" # % baterii

done | yad --center --multi-progress  --title=" $nazwa_skryptu" --bar="$(echo ${bar[1]})" --bar="$(echo ${bar[2]})" --bar="$(echo ${bar[3]})" --bar="$(echo ${bar[4]})" --bar="$(echo ${bar[5]})" --bar="$(echo ${bar[6]})" --bar="$(echo ${bar[7]})" --bar="$(echo ${bar[8]})" --bar="$(echo ${bar[9]})"  --bar="$(echo ${bar[10]})" --auto-kill --window-icon="/opt/NeteXt73/ikony/apm.png" --image="/opt/NeteXt73/ikony/apm.png" --text="$Stan_baterii:\n" --button="$TEXT_ZAMKNIJ:1"
}

ipv6_off(){
echo "sudo apt-get autoremove miredo -y && dpkg -l | awk '/^rc/{ print \$2}' | sudo xargs dpkg --purge"
echo "echo \"#disable ipv6\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.all.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.default.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.lo.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "sudo sysctl -p"
}

ipv6_on(){
echo "sudo apt-get install miredo -y"
echo "sudo sed -i '/#disable ipv6/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.all.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.default.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.lo.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sysctl -p"
}

dymek(){
if [ "$(which notify-send)" != "" ];then
	notify-send "$1" "$2" "$3" "$4"
else
	yad --center --info --title="$3"  --window-icon="$2" --image="$2" --text="$4" --button="gtk-ok:0"
fi
}

upstart_test(){
rm *.txt -f
sudo initctl list | grep -v -E "cryptdisks-udev|network-interface|network-interface-security|wait-for-state" > lista.txt
}


burntest(){
glxgears &
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
xterm -T "BurnTest $i" -e bash -c "echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';python -c \"while True: pass\"" &
done
xterm -T "htop" -e bash -c "htop"
}

yad_wget(){

# NAME:         yad_wget
# VERSION:      0.2
# AUTHOR:       (c) 2014 Glutanimate
# DESCRIPTION:  graphical frontend to wget in form of a yad script
# FEATURES:     - display progress of multiple simultaneous downloads
#               - set maximum number of simultaneous downloads
# DEPENDENCIES: yad
#
#
# LICENSE:      GNU GPLv3 (http://www.gnu.de/documents/gpl-3.0.en.html)
#
# NOTICE:       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. 
#               EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES 
#               PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR 
#               IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
#               AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND 
#               PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
#               YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#               IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY 
#               COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS 
#               PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
#               INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE 
#               THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED 
#               INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE 
#               PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER 
#               PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
#
# USAGE:        yad_wget <space-delimited URLs>
#               Closing the yad dialog will terminate all downloads in progress

# Variables and settings

MAXDLS="5" # set maximum number of simultaneous downloads

URILIST="$@" # gets list of URIs from stdin
USAGE="$0 <space-delimited URLs>"

# Usage checks

if [[ -z "$URILIST" ]];then
	echo "Error: No arguments provided"
	echo "Usage: $USAGE"
	exit 1
fi

download(){
if [ "$(echo $1 | grep premium)" != "" ]; then  #jeżeli konto premium to logujemy się na hasło
	wget --user=$US1 --password=$PASS1 "$1" 2>&1 | sed -u \
	"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	fi
	else
	wget  "$1" 2>&1 | sed -u \
	"s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	fi
fi
}

# compose list of bars for yad
for URI in $URILIST; do                     # iterate through all URIs
	FILENAME="${URI##*/}"                   # extract last field of URI as filename
	YADBARS="$YADBARS --bar=$(echo $FILENAME | sed "s/1.txt/$TEXT_SUMY_KONTROLNE/"):NORM" # add filename to the list of URIs
done

IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and 
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

for URI in $URILIST; do
	if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
	then
		 download "$URI" "$COUNTER"        # if limit reached wait until wget complete
		  DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
	else
		  download "$URI" "$COUNTER" &      # pass URI and URI number to download()
		  DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
	fi
	COUNTER="$[$COUNTER+1]"                 # increment counter
done | yad --center --multi-progress --auto-kill --auto-close --width=$((700*$skala)) $YADBARS --title "$nazwa_skryptu" \
--text "<b>$TEXT_POB2</b>" --window-icon="/opt/NeteXt73/ikony/download.png" --image="/opt/NeteXt73/ikony/download.png" --button="$TEXT_ZAMKNIJ:1"
# ↑ launch yad multi progress-bar window 
}

procesor_monitor(){
barek="--bar=total --bar="used-buffers-cached" --bar="free+buffers+cached" --bar=reserver --bar="total-reserved" --bar=shared --bar=buffers --bar=cached --bar=swap"
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
	barek="$barek --bar=$(echo "core"$i"")" 
done
petla_duza="tak"

while [ "$petla_duza" = "tak" ]; do
	echo "1:$((100*$(free -m | grep Mem | awk '{print $2}')/$(free -m | grep Mem | awk '{print $2}')))"
	echo "2:$(($(($(free -m | grep Mem | awk '{print $3}')-$(free -m | grep Mem | awk '{print $6}')-$(free -m | grep Mem | awk '{print $7}')))*100/$(free -m | grep Mem | awk '{print $2}')))"
	echo "3:$(($(($(free -m | grep Mem | awk '{print $4}')+$(free -m | grep Mem | awk '{print $6}')+$(free -m | grep Mem | awk '{print $7}')))*100/$(free -m | grep Mem | awk '{print $2}')))"
	echo "4:$(($(free -m | grep Mem | awk '{print $3}')*100/$(free -m | grep Mem | awk '{print $2}')))"
	echo "5:$(($(free -m | grep Mem | awk '{print $4}')*100/$(free -m | grep Mem | awk '{print $2}')))"
	echo "6:$((100*$(free -m | grep Mem | awk '{print $5}')/$(free -m | grep Mem | awk '{print $2}')))"
	echo "7:$((100*$(free -m | grep Mem | awk '{print $6}')/$(free -m | grep Mem | awk '{print $2}')))"
	echo "8:$((100*$(free -m | grep Mem | awk '{print $7}')/$(free -m | grep Mem | awk '{print $2}')))"
	if [ "$(free -m | grep Swap | awk '{print $4}')" = "" ] || [ "$(free -m | grep Swap | awk '{print $4}')" = "0" ]; then
		echo "9:0"
		echo "9:#0 MB"
	else
		echo "9:$((100*$(free -m | grep Swap | awk '{print $3}')/$(free -m | grep Swap | awk '{print $4}')))"
		echo "9:#$((100*$(free -m | grep Swap | awk '{print $3}')/$(free -m | grep Swap | awk '{print $4}'))) MB"
	fi
	echo "1:#$(free -m | grep Mem | awk '{print $2}') MB"
	echo "2:#$(($(free -m | grep Mem | awk '{print $3}')-$(free -m | grep Mem | awk '{print $6}')-$(free -m | grep Mem | awk '{print $7}'))) MB"
	echo "3:#$(($(free -m | grep Mem | awk '{print $4}')+$(free -m | grep Mem | awk '{print $6}')+$(free -m | grep Mem | awk '{print $7}'))) MB"
	echo "4:#$(free -m | grep Mem | awk '{print $3}') MB"
	echo "5:#$(free -m | grep Mem | awk '{print $4}') MB"
	echo "6:#$(free -m | grep Mem | awk '{print $5}') MB"
	echo "7:#$(free -m | grep Mem | awk '{print $6}') MB"
	echo "8:#$(free -m | grep Mem | awk '{print $7}') MB"
	sleep 1
	for i in $(seq 10 $(($(grep 'model name' /proc/cpuinfo | wc -l )+9))); do
		echo "$i:$(($(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' )/60))" # * 6000MHZ/100 
		echo "$i:#$(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' ) MHz"
	done 
done | yad --title "$nazwa_skryptu" --center --multi-progress $barek --text="$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | sed 's/.*: //')\nFree Memory, Cpu Core Frequency:\n" --auto-kill --on-top --window-icon="/opt/NeteXt73/ikony/monitor.png" --image="/opt/NeteXt73/ikony/monitor.png" --width=$((460*$skala)) --button="$TEXT_ZAMKNIJ:1"
if [ "$?" != "" ]; then
	petla_duza="nie"  
fi
}

opusc_petle(){
	petla_duza="nie"
	rm *.txt -f *.sh
}

opusc__mala_petle(){
	petla="nie"
	rm *.txt -f *.sh
}

kill_yad(){
	kill -9 $(ps -aux | grep yad | grep $1 | awk '{print $2}' | head -n 1)
}


#gcc
sprawdz_gcc(){
echo "if [ \"\$(gcc --version | head -n 1 | grep 5)\" = \"\" ]; then"
echo "sudo apt-get update"
echo "sudo apt-get install gcc-5 -y"
echo "sudo apt-get dist-upgrade -y"
echo "sudo ln -sf /usr/bin/gcc-5 /usr/bin/gcc"
echo "sudo ln -sf /usr/bin/gcc-ar-5 /usr/bin/gcc-ar"
echo "sudo ln -sf /usr/bin/cpp-5 /usr/bin/cpp"
echo "fi"
}

instaluj_gcc(){
if [ "$1" = "instaluj_nowy" ];then
	echo "sudo tar -Jxf /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety | grep gcc) -C /opt/"
	echo "sudo tar -Jxf /opt/NeteXt73/pakiety/\$(ls /opt/NeteXt73/pakiety | grep binutils) -C /opt/"
	echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc /usr/bin/gcc && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc-ar /usr/bin/gcc-ar && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/cpp /usr/bin/cpp && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/g++ /usr/bin/g++ && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/c++ /usr/bin/c++"
	#echo "sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc /usr/bin/gcc && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/gcc-ar /usr/bin/gcc-ar && sudo ln -sf /opt/gcc-\$(ls /opt/NeteXt73/pakiety/ | grep gcc | cut -d "-" -f 2 | sed 's/.tar.xz//g')/bin/cpp /usr/bin/cpp"
	echo "sudo ldconfig"
	echo "sudo rm /usr/lib/x86_64-linux-gnu/libisl.so.10"
	echo "sudo ln -sf /usr/lib/x86_64-linux-gnu/libisl.so.13 /usr/lib/x86_64-linux-gnu/libisl.so.10"
elif [ "$1" = "zmien" ];then
	echo "sudo ln -sf /opt/gcc-\$wersja/bin/gcc /usr/bin/gcc && sudo ln -sf /opt/gcc-\$wersja/bin/gcc-ar /usr/bin/gcc-ar && sudo ln -sf /opt/gcc-\$wersja/bin/cpp /usr/bin/cpp && sudo ln -sf /opt/gcc-\$wersja/bin/g++ /usr/bin/g++ && sudo ln -sf /opt/gcc-\$wersja/bin/c++ /usr/bin/c++"
	#echo "sudo ln -sf /usr/bin/c++-\$wersja /usr/bin/c++"
	#echo "sudo ln -sf /opt/gcc-\$wersja/bin/gcc /usr/bin/gcc && sudo ln -sf /opt/gcc-\$wersja/bin/gcc-ar /usr/bin/gcc-ar && sudo ln -sf /opt/gcc-\$wersja/bin/cpp /usr/bin/cpp"
	echo "sudo ldconfig"
	echo "sudo rm -rf /usr/lib/x86_64-linux-gnu/libisl.so.10 && sudo ln -sf /usr/lib/x86_64-linux-gnu/libisl.so.13 /usr/lib/x86_64-linux-gnu/libisl.so.10"
elif [ "$1" = "zmien_stary" ];then
	echo "sudo ln -sf /usr/bin/gcc-\$wersja /usr/bin/gcc && sudo ln -sf /usr/bin/gcc-ar-\$wersja /usr/bin/gcc-ar && sudo ln -sf /usr/bin/cpp-\$wersja /usr/bin/cpp"
	echo "sudo ln -sf /usr/bin/g++-\$wersja /usr/bin/g++"
fi
}


sumy(){
#pobranie sum kontrolnych i sprawdzanie połączenia z netem
cd /tmp

wget $adres_sum_kontrolnych  -q # 2>&1 | pobieranie
openssl enc -d -aes-256-cbc -in sumy_kontrolne.txt -pass pass:sumykontrolne -out $sumy_kontrolne
rm sumy_kontrolne.txt -f
if [ "$(cat $sumy_kontrolne)" = "" ]; then
	yad --center --info --title="$nazwa_skryptu  " --text="<span color=\"$kolor_textu\"><b>$BRAKNETA</b></span>" --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --on-top
	exit 1
fi
if [ "$(curl $adres_sum_kontrolnych2 2>&1 | grep OK)" = '' ]; then
	yad --center --info --title="$nazwa_skryptu   " --text="<span color=\"$kolor_textu\"><b>$BRAKNETA</b></span>" --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --on-top
	exit 1
fi
}

#ostrzeżenie o konfliktach
zaleznosci(){
cd /tmp/netext73
plik=""
for i in $(echo tlp acpi-call laptop-mode-tools ulatelcy ulatencyd cpufrequtils);do
if [ "$(dpkg -l | awk '{print $2}' | grep $i -x)" != "" ];then
	export plik="$plik $i"
fi
done
if [ "$plik" != "" ]; then
	if yad --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_POWROT:1" --text="$TEXT_WARRING_DEP1\n$plik"; then
		naglowek > instaluj.sh
		echo "sudo apt-get purge $plik" >> instaluj.sh
		instalacja
	fi
fi

#naprawa Gtk-WARNING **: Theme file for default has no directories
if [ "$(grep gtk-fallback-icon-theme="default" ~/.gtkrc-2.0)" != "" ]; then
	sed -i 's/gtk-fallback-icon-theme="default"/gtk-fallback-icon-theme="gnome"/' ~/.gtkrc-2.0
fi

#odpalanie strony domowej 
if [ ! -e ~/.netext73/strona_domowa ]; then
	xdg-open "http://www.netext73.pl/p/netext73-poczatek.html"
	echo "TRUE" > ~/.netext73/strona_domowa
fi
#życzenia świąteczne
DATA=$(date +"%m-%d")
if [ "$(echo $DATA | grep -x -e "12-24" -e "12-25" -e "12-26" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n\n\n\n\nZespół NeteXt'73 życzy\n<span color=\"$kolor_textu\"><b>Wesołych Świąt Bożego Narodzenia!</b></span>\n\n\nNeteXt'73 team\n<span color=\"$kolor_textu\"><b>wishes Merry Christmas!</b></span>" --window-icon="/opt/NeteXt73/ikony/tux_santa.png" --image="/opt/NeteXt73/ikony/tux_santa.png" --button="gtk-ok:0" --on-top
fi
#życzenia noworoczne
if [ "$DATA" = "12-31" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n<span color=\"$kolor_textu\"><b>Happy New Year !!</b></span>\n\n\nNeteXt'73 team wishes Happy New Year $(( $(date +"%Y")+1 ))\n\nZespół NeteXt'73 życzy Szczęśliwego Nowego Roku $(( $(date +"%Y")+1 ))" --window-icon="/opt/NeteXt73/ikony/happyny.png" --image="/opt/NeteXt73/ikony/happyny.png" --button="gtk-ok:0" --on-top
fi
if [ "$DATA" = "01-01" ]; then
	yad --center --info --title="$nazwa_skryptu   "  --text="\n\n\n<span color=\"$kolor_textu\"><b>Happy New Year !!</b></span>\n\n\nNeteXt'73 team wishes Happy New Year $(( $(date +"%Y") ))\n\nZespół NeteXt'73 życzy Szczęśliwego Nowego Roku $(( $(date +"%Y") ))" --window-icon="/opt/NeteXt73/ikony/happyny.png" --image="/opt/NeteXt73/ikony/happyny.png" --button="gtk-ok:0" --on-top
fi

#sprawdzanie wersji systemu
if [ "$(echo $WERSJA_UBUNTU | grep -i -x -e trusty -e vivid -e wily)" != "" ] ; then
      echo 'ok' > /dev/null
else
      dymek  -i  $warning1 "$TEXT_INFORMACJA" "<b>NeteXt'73 - $TEXT_BRAK_KERNELA</b>"
fi
}

